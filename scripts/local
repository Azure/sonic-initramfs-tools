# Local filesystem mounting			-*- shell-script -*-

# Parameter: device node to check
# Echos fstype to stdout
# Return value: indicates if an fs could be recognized
get_fstype ()
{
	local FS FSTYPE FSSIZE RET
	FS="${1}"

	# vol_id has a more complete list of file systems
	if [ -x /lib/udev/vol_id ]; then
		FSTYPE=$(/lib/udev/vol_id -t "${FS}" 2> /dev/null)
	else
		eval $(fstype < "${FS}" 2> /dev/null)
	fi
	RET=$?

	if [ -z "${FSTYPE}" ]; then
		FSTYPE="unknown"
	fi

	echo "${FSTYPE}"
	return ${RET}
}

# Parameter: Where to mount the filesystem
mountroot ()
{
	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-top"
	run_scripts /scripts/local-top
	[ "$quiet" != "y" ] && log_end_msg

	# If the root device hasn't shown up yet, give it a little while
	# to deal with removable devices
	if [ ! -e "${ROOT}" ] || ! $(get_fstype "${ROOT}" >/dev/null); then
		log_begin_msg "Waiting for root file system..."

		# Default delay is 180s
		if [ -z "${ROOTDELAY}" ]; then
			slumber=180
		else
			slumber=${ROOTDELAY}
		fi
		if [ -x /sbin/usplash_write ]; then
			/sbin/usplash_write "TIMEOUT $(( ${slumber} + 5 ))" || true
		fi

		slumber=$(( ${slumber} * 10 ))
		while [ ! -e "${ROOT}" ] || ! $(get_fstype "${ROOT}" >/dev/null); do
			/bin/sleep 0.1
			slumber=$(( ${slumber} - 1 ))
			[ ${slumber} -gt 0 ] || break
		done

		if [ ${slumber} -gt 0 ]; then
			log_end_msg 0
		else
			log_end_msg 1 || true
		fi
		if [ -x /sbin/usplash_write ]; then
			/sbin/usplash_write "TIMEOUT 15" || true
		fi
	fi

	# We've given up, but we'll let the user fix matters if they can
	while [ ! -e "${ROOT}" ]; do
		echo "ALERT!  ${ROOT} does not exist.  Dropping to a shell!"
		echo "	Check your root= boot argument (cat /proc/cmdline)"
		panic "	Check for missing modules (cat /proc/modules), or device files (ls /dev)"
	done

	# Get the root filesystem type if not set
	if [ -z "${ROOTFSTYPE}" ]; then
		FSTYPE=$(get_fstype "${ROOT}")
	else
		FSTYPE=${ROOTFSTYPE}
	fi

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-premount"
	run_scripts /scripts/local-premount
	[ "$quiet" != "y" ] && log_end_msg

	if [ ${readonly} = y ]; then
		roflag=-r
	else
		roflag=-w
	fi

	modprobe ${FSTYPE}

	# Look for $FSTYPE in /proc/filesystems (without using grep)
	$(while read line; do
		if [ "${line}" != "${line%${FSTYPE}}" ]; then
			exit 0
		fi
	done < /proc/filesystems
	exit 1)

	if [ $? -ne 0 ]; then
		echo "WARNING!  Support for filesystem ${FSTYPE} seems to be missing"
		echo "  ${FSTYPE} is necessary to mount the root fs (${ROOT})"
	fi

	# Loop until something is mounted on ${rootmnt}
	while [ 1 ]; do
		mount ${roflag} -t ${FSTYPE} ${ROOTFLAGS} ${ROOT} ${rootmnt}

		$(while read source target options; do
			if [ "${target}" = "${rootmnt}" ]; then
				exit 0
			fi
		done < /proc/mounts
		exit 1)

		if [ $? -eq 0 ]; then
			break
		fi

		echo "ALERT!  Unable to mount root filesystem (${ROOT}).  Dropping to a shell!"
		echo "	Check your root= boot argument (cat /proc/cmdline)"
		panic "	Check for missing modules (cat /proc/modules), or device files (ls /dev)"
	done

	[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/local-bottom"
	run_scripts /scripts/local-bottom
	[ "$quiet" != "y" ] && log_end_msg
}
